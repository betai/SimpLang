keyword let
identifier bitset
identifier x
identifier i
operator =
keyword loop
identifier x
operator =
identifier x
keyword and
identifier i
operator =
identifier i
keyword in
keyword if
identifier i
operator <
integer 63
keyword then
keyword recur
operator (
identifier x
operator *
integer 2
operator )
operator (
identifier i
operator +
integer 1
operator )
keyword else
identifier x
operator <
integer 0
keyword end
keyword end
keyword end
keyword let
identifier shiftl
identifier x
identifier a
operator =
keyword loop
identifier x
operator =
identifier x
keyword and
identifier i
operator =
integer 0
keyword in
keyword if
identifier i
operator <
identifier a
keyword then
keyword recur
operator (
identifier x
operator *
integer 2
operator )
operator (
identifier i
operator +
integer 1
operator )
keyword else
identifier x
keyword end
keyword end
keyword end
keyword let
identifier shiftr
identifier x
identifier a
operator =
keyword loop
identifier r
operator =
integer 0
keyword and
identifier i
operator =
integer 0
keyword in
keyword if
identifier a
operator +
identifier i
operator <
integer 64
keyword then
keyword recur
operator (
identifier r
operator +
identifier shiftl
operator (
identifier bitset
operator (
identifier x
operator )
operator (
identifier a
operator +
identifier i
operator )
operator )
operator (
identifier i
operator )
operator )
operator (
identifier i
operator +
integer 1
operator )
keyword else
identifier r
keyword end
keyword end
keyword end
keyword let
identifier leadingzeros
identifier x
operator =
keyword if
identifier x
operator ==
integer 0
keyword then
integer 64
keyword else
keyword if
identifier x
operator <
integer 0
keyword then
integer 0
keyword else
integer 1
operator +
operator (
identifier leadingzeros
operator (
identifier x
operator *
integer 2
operator )
operator )
keyword end
keyword end
keyword end
keyword let
identifier sign
identifier x
operator =
keyword if
identifier x
operator ==
integer 0
keyword then
integer 0
keyword else
keyword if
identifier x
operator <
integer 0
keyword then
operator -
integer 1
keyword else
integer 1
keyword end
keyword end
keyword end
keyword let
identifier div
identifier x
identifier y
operator =
keyword let
identifier multiplier
operator =
identifier sign
operator (
identifier x
operator )
operator *
identifier sign
operator (
identifier y
operator )
keyword and
identifier x
operator =
identifier x
operator *
identifier sign
operator (
identifier x
operator )
keyword and
identifier y
operator =
identifier y
operator *
identifier sign
operator (
identifier y
operator )
keyword and
identifier lz
operator =
identifier leadingzeros
operator (
identifier y
operator )
keyword in
keyword loop
identifier x
operator =
identifier x
keyword and
identifier r
operator =
integer 0
keyword and
identifier i
operator =
identifier lz
operator +
operator -
integer 1
keyword in
keyword if
identifier i
operator <
integer 0
keyword then
identifier r
operator *
identifier multiplier
keyword else
keyword let
identifier sy
operator =
identifier shiftl
operator (
identifier y
operator )
operator (
identifier i
operator )
keyword in
keyword if
operator !
operator (
identifier x
operator <
identifier sy
operator )
keyword then
keyword recur
operator (
identifier x
operator +
operator -
identifier sy
operator )
operator (
identifier r
operator +
operator (
identifier shiftl
operator (
integer 1
operator )
operator (
identifier i
operator )
operator )
operator )
operator (
identifier i
operator +
operator -
integer 1
operator )
keyword else
keyword recur
operator (
identifier x
operator )
operator (
identifier r
operator )
operator (
identifier i
operator +
operator -
integer 1
operator )
keyword end
keyword end
keyword end
keyword end
keyword end
keyword end
keyword let
identifier rem
identifier x
identifier y
operator =
keyword let
identifier quot
operator =
identifier div
operator (
identifier x
operator )
operator (
identifier y
operator )
keyword in
identifier x
operator +
operator -
operator (
identifier y
operator *
identifier quot
operator )
keyword end
keyword end
keyword let
identifier min
identifier a
identifier b
operator =
keyword if
identifier a
operator <
identifier b
keyword then
identifier a
keyword else
identifier b
keyword end
keyword end
keyword let
identifier sqrt
identifier x
operator =
keyword loop
identifier l
operator =
integer 1
keyword and
identifier h
operator =
identifier min
operator (
identifier x
operator )
operator (
integer 3037000499
operator )
keyword in
keyword if
identifier l
operator ==
identifier h
keyword then
identifier l
keyword else
keyword let
identifier m
operator =
identifier l
operator +
identifier shiftr
operator (
identifier h
operator +
operator -
identifier l
operator +
integer 1
operator )
operator (
integer 1
operator )
keyword in
keyword if
identifier x
operator <
identifier m
operator *
identifier m
keyword then
keyword recur
operator (
identifier l
operator )
operator (
identifier m
operator +
operator -
integer 1
operator )
keyword else
keyword recur
operator (
identifier m
operator )
operator (
identifier h
operator )
keyword end
keyword end
keyword end
keyword end
keyword end
keyword let
identifier isprime
identifier n
operator =
keyword let
identifier u
operator =
identifier sqrt
operator (
identifier n
operator )
operator +
integer 1
keyword in
keyword loop
identifier i
operator =
integer 2
keyword in
keyword if
identifier i
operator <
identifier u
keyword then
keyword if
identifier rem
operator (
identifier n
operator )
operator (
identifier i
operator )
operator ==
integer 0
keyword then
integer 0
keyword else
keyword recur
operator (
identifier i
operator +
integer 1
operator )
keyword end
keyword else
integer 1
keyword end
keyword end
keyword end
keyword end
keyword let
identifier nextprime
identifier n
operator =
keyword loop
identifier n
operator =
identifier n
operator +
integer 1
keyword in
keyword if
identifier isprime
operator (
identifier n
operator )
keyword then
identifier n
keyword else
keyword recur
operator (
identifier n
operator +
integer 1
operator )
keyword end
keyword end
keyword end
keyword let
identifier main
identifier x
operator =
identifier nextprime
operator (
identifier x
operator )
keyword end
